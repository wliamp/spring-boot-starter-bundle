name: CI Pipeline

on:
  push:
    branches: ["dev"]          # Trigger on push to dev branch
  pull_request:
    branches: ["dev"]          # Trigger on PR targeting dev branch

jobs:
  # ------------------------
  # Detect changed starters/modules
  # ------------------------
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            all:
              - 'bundle/**'
            agr:
              - 'algorithm/**'
              - 'algorithm/README.md'
            pro:
              - 'provider/**'
            pro-pay:
              - 'provider-payment/**'
              - 'provider-payment/README.md'
            pro-vrf:
              - 'provider-verify/**'
              - 'provider-verify/README.md'
            tk:
              - 'token/**'
              - 'token/README.md'

      - id: set-matrix
        run: |
          starters=()

          if [[ "${{ steps.filter.outputs.all }}" == "true" ]]; then
            starters+=('{"service":"all","gradleTask":":all","reportPath":"bundle/build/reports"}')
          fi
          if [[ "${{ steps.filter.outputs.agr }}" == "true" ]]; then
            starters+=('{"service":"agr","gradleTask":":agr","reportPath":"algorithm/build/reports"}')
          fi
          if [[ "${{ steps.filter.outputs.pro }}" == "true" ]]; then
            starters+=('{"service":"pro","gradleTask":":pro","reportPath":"provider/build/reports"}')
          fi
          if [[ "${{ steps.filter.outputs.pro-pay }}" == "true" ]]; then
            starters+=('{"service":"pro-pay","gradleTask":":pro-pay","reportPath":"provider-payment/build/reports"}')
          fi
          if [[ "${{ steps.filter.outputs.pro-vrf }}" == "true" ]]; then
            starters+=('{"service":"pro-vrf","gradleTask":":pro-vrf","reportPath":"provider-verify/build/reports"}')
          fi
          if [[ "${{ steps.filter.outputs.tk }}" == "true" ]]; then
            starters+=('{"service":"tk","gradleTask":":tk","reportPath":"token/build/reports"}')
          fi

          echo "matrix=$(jq -c -n --argjson s "[${starters[*]}]" '{include: $s}')" >> $GITHUB_OUTPUT

  # ------------------------
  # Run static checks + tests on changed modules
  # ------------------------
  test:
    needs: setup
    if: needs.setup.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run static checks (Checkstyle/Spotbugs)
        run: ./gradlew ${{ matrix.gradleTask }}:check

      - name: Run tests + coverage
        continue-on-error: true
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./gradlew ${{ matrix.gradleTask }}:test jacocoTestReport

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-test-report
          path: ${{ matrix.reportPath }}/tests/test
          if-no-files-found: warn

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-coverage-report
          path: ${{ matrix.reportPath }}/jacoco/test/html
          if-no-files-found: warn

